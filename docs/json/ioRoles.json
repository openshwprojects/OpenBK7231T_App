[
  {
    "name": "None",
    "title": "TODO",
    "descr": "Default pin role; this pin does nothing.",
    "enum": "IOR_None",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Relay",
    "title": "TODO",
    "descr": "an active-high relay. This relay is closed when a logical 1 value is on linked channel",
    "enum": "IOR_Relay",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Relay_n",
    "title": "TODO",
    "descr": "(as Relay but pin logical value is inversed)",
    "enum": "IOR_Relay_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Button",
    "title": "TODO",
    "descr": "a typical button of Tuya device with active-low state (a button that connects IO pin to ground when pressed and also has a 10k or so pull up resistor)",
    "enum": "IOR_Button",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Button_n",
    "title": "TODO",
    "descr": "as Button but pin logical value is inversed",
    "enum": "IOR_Button_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "LED",
    "title": "TODO",
    "descr": "an active-high LED. The internals of 'LED' are the same as of 'Relay'. Names are just separate to make it easier for users.",
    "enum": "IOR_LED",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "LED_n",
    "title": "TODO",
    "descr": "(as Led but pin logical value is inversed)",
    "enum": "IOR_LED_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "PWM",
    "title": "TODO",
    "descr": "Pulse width modulation output for LED dimmers (with MQTT dimming support from Home Assistant). Remember to set related channel to correct color index, in the RGBCW order. For CW only lights, set only CW indices.",
    "enum": "IOR_PWM",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "LED_WIFI",
    "title": "TODO",
    "descr": "special LED to indicate WLan connection state. LED states are following: LED on = client mode successfully connected to your Router. Half a second blink - connecting to your router, please wait (or connection problem). Fast blink (200ms) - open access point mode. In safe mode (after failed boots), LED might not work.",
    "enum": "IOR_LED_WIFI",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "LED_WIFI_n",
    "title": "TODO",
    "descr": "As LED_WIFI, but with inversed logic.",
    "enum": "IOR_LED_WIFI_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Button_ToggleAll",
    "title": "TODO",
    "descr": "this button toggles all channels at once",
    "enum": "IOR_Button_ToggleAll",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Button_ToggleAll_n",
    "title": "TODO",
    "descr": "Button_ToggleAll as, but inversed logic of button",
    "enum": "IOR_Button_ToggleAll_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "DigitalInput",
    "title": "TODO",
    "descr": "this is a simple digital input pin, it sets the linked channel to current logical value on it, just like digitalRead( ) from Arduino. This input has a internal pull up resistor.",
    "enum": "IOR_DigitalInput",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "DigitalInput_n",
    "title": "TODO",
    "descr": "As DigitalInput as above, but inverted",
    "enum": "IOR_DigitalInput_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "ToggleChannelOnToggle",
    "title": "TODO",
    "descr": "this pin will toggle target channel when a value on this pin changes (with debouncing). you can connect simple two position switch here and swapping the switch will toggle target channel relay on or off",
    "enum": "IOR_ToggleChannelOnToggle",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "DigitalInput_NoPup",
    "title": "TODO",
    "descr": "As DigitalInput, but without internal programmable pullup resistor. This is used for, for example, XR809 water sensor and door sensor.",
    "enum": "IOR_DigitalInput_NoPup",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "DigitalInput_NoPup_n",
    "title": "TODO",
    "descr": "As DigitalInput_n, but without internal programmable pullup resistor",
    "enum": "IOR_DigitalInput_NoPup_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BL0937_SEL",
    "title": "TODO",
    "descr": "SEL pin for BL0937 energy measuring devices. Set all BL0937 pins to autostart BL0937 driver. Don't forget to calibrate it later.",
    "enum": "IOR_BL0937_SEL",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BL0937_CF",
    "title": "TODO",
    "descr": "CF pin for BL0937 energy measuring devices. Set all BL0937 pins to autostart BL0937 driver. Don't forget to calibrate it later.",
    "enum": "IOR_BL0937_CF",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BL0937_CF1",
    "title": "TODO",
    "descr": "CF1 pin for BL0937 energy measuring devices. Set all BL0937 pins to autostart BL0937 driver. Don't forget to calibrate it later.",
    "enum": "IOR_BL0937_CF1",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "ADC",
    "title": "TODO",
    "descr": "Analog to Digital converter converts voltage to channel value which is later published by MQTT and also can be used to trigger scriptable events",
    "enum": "IOR_ADC",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SM2135_DAT",
    "title": "TODO",
    "descr": "SM2135 DAT pin for SM2135 modified-I2C twowire LED driver, used in RGBCW lights. Set both required SM2135 pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
    "enum": "IOR_SM2135_DAT",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SM2135_CLK",
    "title": "TODO",
    "descr": "SM2135 CLK pin for SM2135 modified-I2C twowire LED driver, used in RGBCW lights. Set both required SM2135 pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
    "enum": "IOR_SM2135_CLK",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BP5758D_DAT",
    "title": "TODO",
    "descr": "BP5758D DAT pin for BP5758D modified-I2C twowire LED driver, used in RGBCW lights. Set both required BP5758D pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
    "enum": "IOR_BP5758D_DAT",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BP5758D_CLK",
    "title": "TODO",
    "descr": "BP5758D CLK pin for BP5758D modified-I2C twowire LED driver, used in RGBCW lights. Set both required BP5758D pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
    "enum": "IOR_BP5758D_CLK",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BP1658CJ_DAT",
    "title": "TODO",
    "descr": "BP1658CJ DAT pin for BP5758D modified-I2C twowire LED driver, used in RGBCW lights. Set both required BP1658CJ pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
    "enum": "IOR_BP1658CJ_DAT",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BP1658CJ_CLK",
    "title": "TODO",
    "descr": "BP1658CJ CLK pin for BP5758D modified-I2C twowire LED driver, used in RGBCW lights. Set both required BP1658CJ pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
    "enum": "IOR_BP1658CJ_CLK",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "PWM_n",
    "title": "TODO",
    "descr": "as above, but percentage of duty is inversed. This might be useful for some special LED drivers that are using single PWM to choose between Cool white and Warm white (it also needs setting a special flag in General options)",
    "enum": "IOR_PWM_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "IRRecv",
    "title": "TODO",
    "descr": "IR receiver for our IRLibrary port",
    "enum": "IOR_IRRecv",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "IRSend",
    "title": "TODO",
    "descr": "IR sender for our IRLibrary port",
    "enum": "IOR_IRSend",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Button_NextColor",
    "title": "TODO",
    "descr": "for RGB strip with buttons; sets next predefined color. For a LED strip that has separate POWER and COLOR buttons.",
    "enum": "IOR_Button_NextColor",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Button_NextColor_n",
    "title": "TODO",
    "descr": "As NextColor, but inversed button logic",
    "enum": "IOR_Button_NextColor_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Button_NextDimmer",
    "title": "TODO",
    "descr": "for RGB strip with buttons; when hold, adjusts the brightness",
    "enum": "IOR_Button_NextDimmer",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Button_NextDimmer_n",
    "title": "TODO",
    "descr": "As NextDimmer, but inversed button logic",
    "enum": "IOR_Button_NextDimmer_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "AlwaysHigh",
    "title": "TODO",
    "descr": "always outputs 1",
    "enum": "IOR_AlwaysHigh",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "AlwaysLow",
    "title": "TODO",
    "descr": "always outputs 0",
    "enum": "IOR_AlwaysLow",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "UCS1912_DIN",
    "title": "TODO",
    "descr": "WIP driver, write a post on Elektroda if you need it working",
    "enum": "IOR_UCS1912_DIN",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SM16703P_DIN",
    "title": "TODO",
    "descr": "WIP driver, write a post on Elektroda if you need it working",
    "enum": "IOR_SM16703P_DIN",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Button_NextTemperature",
    "title": "TODO",
    "descr": "Button that automatically allows you to control temperature of your LED device",
    "enum": "IOR_Button_NextTemperature",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Button_NextTemperature_n",
    "title": "TODO",
    "descr": "Like Button_NextTemperature, but inversed button logic",
    "enum": "IOR_Button_NextTemperature_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Button_ScriptOnly",
    "title": "TODO",
    "descr": "This button does nothing automatically, even the linked channel is not changed. Useful for scripts, but you can still also use any buttons for scripting.",
    "enum": "IOR_Button_ScriptOnly",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Button_ScriptOnly_n",
    "title": "TODO",
    "descr": "Like Button_ScriptOnly, but inversed logic",
    "enum": "IOR_Button_ScriptOnly_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "DHT11",
    "title": "TODO",
    "descr": "DHT11 data line. You can have multiple DHT sensors on your device. Related driver is automatically started. Results are saved in related channels to pin with that role (when editing pins, you get two textboxes to set channel indexes)",
    "enum": "IOR_DHT11",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "DHT12",
    "title": "TODO",
    "descr": "DHT12 data line. You can have multiple DHT sensors on your device. Related driver is automatically started. Results are saved in related channels to pin with that role (when editing pins, you get two textboxes to set channel indexes)",
    "enum": "IOR_DHT12",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "DHT21",
    "title": "TODO",
    "descr": "DHT21 data line. You can have multiple DHT sensors on your device. Related driver is automatically started. Results are saved in related channels to pin with that role (when editing pins, you get two textboxes to set channel indexes)",
    "enum": "IOR_DHT21",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "DHT22",
    "title": "TODO",
    "descr": "DHT22 data line. You can have multiple DHT sensors on your device. Related driver is automatically started. Results are saved in related channels to pin with that role (when editing pins, you get two textboxes to set channel indexes)",
    "enum": "IOR_DHT22",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "CHT83XX_DAT",
    "title": "TODO",
    "descr": "DAT pin of CHT83XX. Setting this pin role and saving will reveal two fields next to it. Set first field to 1 and second to 2. Those are related channel numbers to store temperature and humidity.",
    "enum": "IOR_CHT83XX_DAT",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "CHT83XX_CLK",
    "title": "TODO",
    "descr": "CLK pin of CHT83XX sensor",
    "enum": "IOR_CHT83XX_CLK",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SHT3X_DAT",
    "title": "TODO",
    "descr": "Humidity/temperature sensor DATA pin. Driver will autostart if both required pins are set. See [SHT Sensor tutorial topic here](https://www.elektroda.com/rtvforum/topic3958369.html), also see [this sensor teardown](https://www.elektroda.com/rtvforum/topic3945688.html)",
    "enum": "IOR_SHT3X_DAT",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SHT3X_CLK",
    "title": "TODO",
    "descr": "Humidity/temperature sensor CLOCK pin. Driver will autostart if both required pins are set. See [SHT Sensor tutorial topic here](https://www.elektroda.com/rtvforum/topic3958369.html), also see [this sensor teardown](https://www.elektroda.com/rtvforum/topic3945688.html)",
    "enum": "IOR_SHT3X_CLK",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SOFT_SDA",
    "title": "TODO",
    "descr": "Generic software SDA pin for our more advanced, scriptable I2C driver. This allows you to even connect a I2C display to OBK.",
    "enum": "IOR_SOFT_SDA",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SOFT_SCL",
    "title": "TODO",
    "descr": "Generic software SCL pin for our more advanced, scriptable I2C driver.",
    "enum": "IOR_SOFT_SCL",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SM2235_DAT",
    "title": "TODO",
    "descr": "It works for both SM2235 and SM2335. SM2235 DAT pin for SM2235 modified-I2C twowire LED driver, used in RGBCW lights. Set both required SM2235 pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
    "enum": "IOR_SM2235_DAT",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SM2235_CLK",
    "title": "TODO",
    "descr": "It works for both SM2235 and SM2335. SM2235 CLK pin for SM2235 modified-I2C twowire LED driver, used in RGBCW lights. Set both required SM2235 pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
    "enum": "IOR_SM2235_CLK",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BridgeForward",
    "title": "TODO",
    "descr": "Motor/Relay bridge driver control signal. FORWARD direction.",
    "enum": "IOR_BridgeForward",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BridgeReverse",
    "title": "TODO",
    "descr": "Motor/Relay bridge driver control signal. REVERSE direction.",
    "enum": "IOR_BridgeReverse",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SmartButtonForLEDs",
    "title": "TODO",
    "descr": "A single button that does all control for LED. Click it toggle power, hold to adjust brightness, double click for next color, triple click for next temperature",
    "enum": "IOR_SmartButtonForLEDs",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SmartButtonForLEDs_n",
    "title": "TODO",
    "descr": "As SmartButtonForLEDs, but inverted",
    "enum": "IOR_SmartButtonForLEDs_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "DoorSensorWithDeepSleep",
    "title": "TODO",
    "descr": "Setting this role will make DoorSensor driver autostart. DoorSensor will work like digital input, sending only its value on change. When there are no changes for some times, device will go into deep sleep to save battery. When a change occurs, device will wake up and report change. See [a door sensor example here](https://www.elektroda.com/rtvforum/topic3960149.html)",
    "enum": "IOR_DoorSensorWithDeepSleep",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "DoorSensorWithDeepSleep_NoPup",
    "title": "TODO",
    "descr": "As DoorSensorWithDeepSleep, but no pullup resistor",
    "enum": "IOR_DoorSensorWithDeepSleep_NoPup",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BAT_ADC",
    "title": "TODO",
    "descr": "Like ADC, but for a Battery driver that does Battery measurement. See [battery driver topic here](https://www.elektroda.com/rtvforum/topic3959103.html)",
    "enum": "IOR_BAT_ADC",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BAT_Relay",
    "title": "TODO",
    "descr": "Like Relay, but for a Battery driver that does Battery measurement. See [battery driver topic here](https://www.elektroda.com/rtvforum/topic3959103.html)",
    "enum": "IOR_BAT_Relay",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "TM1637_DIO",
    "title": "TODO",
    "descr": "TM1637 LED display driver DIO pin. Setting all required TM1637 pins will autostart related driver",
    "enum": "IOR_TM1637_DIO",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "TM1637_CLK",
    "title": "TODO",
    "descr": "TM1637 LED display driver CLK pin. Setting all required TM1637 pins will autostart related driver",
    "enum": "IOR_TM1637_CLK",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BL0937_SEL_n",
    "title": "TODO",
    "descr": "Inverted SEL alternative for BL0937. Choose only one, either SEL or SEL_n. SEL_n may be needed in rare cases.",
    "enum": "IOR_BL0937_SEL_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "DoorSensorWithDeepSleep_pd",
    "title": "TODO",
    "descr": "As DoorSensorWithDeepSleep, but with pulldown resistor",
    "enum": "IOR_DoorSensorWithDeepSleep_pd",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SGP_CLK",
    "title": "TODO",
    "descr": "SGP Quality Sensor Clock line. will autostart related driver",
    "enum": "IOR_SGP_CLK",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "SGP_DAT",
    "title": "TODO",
    "descr": "SGP Quality Sensor Data line. will autostart related driver",
    "enum": "IOR_SGP_DAT",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "ADC_Button",
    "title": "TODO",
    "descr": "Single ADC with multiple buttons connected.d",
    "enum": "ADC_Button",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "GN6932_CLK",
    "title": "TODO",
    "descr": "QQQ",
    "enum": "GN6932_CLK",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "GN6932_DAT",
    "title": "TODO",
    "descr": "QQQ",
    "enum": "GN6932_DAT",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "GN6932_STB",
    "title": "TODO",
    "descr": "QQQ",
    "enum": "GN6932_STB",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "TM1638_CLK",
    "title": "TODO",
    "descr": "QQQ",
    "enum": "TM1638_CLK",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "TM1638_DAT",
    "title": "TODO",
    "descr": "QQQ",
    "enum": "TM1638_DAT",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "TM1638_STB",
    "title": "TODO",
    "descr": "QQQ",
    "enum": "TM1638_STB",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "BAT_Relay_n",
    "title": "TODO",
    "descr": "Like BAT_Relay, but inversed. See [battery driver topic here](https://www.elektroda.com/rtvforum/topic3959103.html)",
    "enum": "IOR_BAT_Relay_n",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "KP18058_CLK",
    "title": "TODO",
    "descr": "QQQ",
    "enum": "KP18058_CLK",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "KP18058_DAT",
    "title": "TODO",
    "descr": "QQQ",
    "enum": "KP18058_DAT",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "DS1820",
    "title": "TODO",
    "descr": "vers simple OneWire Temp sensor DS1820",
    "enum": "DS1820_IO",
    "file": "new_pins.h",
    "driver": ""
  },
  {
    "name": "Total_Options",
    "title": "TODO",
    "descr": "Current total number of available IOR roles",
    "enum": "IOR_Total_Options",
    "file": "new_pins.h",
    "driver": ""
  }
]