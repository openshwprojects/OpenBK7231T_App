#if (INCLUDED_BY_NEW_PINS_H) || (INCLUDED_BY_NEW_PINS_C) || (INCLUDED_BY_NEW_HTTP_C) || (INCLUDED_BY_HTTP_FNS_C)


// pseudo structure for values describing a channels usage
typedef struct {
	char* desc;		// description (like Temperature, Humidity ...). This MUST match iodetails "channel usage"
	char* enum_desc;	// description for enum will be used as CHAN_<enum_desc> for enum buliding channel values (to make header file readable - just needs to be different per line)
	char* comment;		// just for comments in enum to make header file better readable
	char* htlm;		// this is used in web page to indicate the function - can be text or a unicode symbol like thermometer (&#x1F321;) for temperature
}  cval_t;

// pseudo array, only to build header file
// values 
// lines: {"<channel usage string, as in iodetail:>","<abbrevation for enum>","<comment for enum>","<HTML code used to indicate function>",<bool: display in legend>}
//
//
//
//	so e.g. this array
//
//      cval_t cvals[] = {
//              {"","Empty","no channel description","",0},
//              {"Connector","Con","Connector (LED, button, relay ...)","&#x1F4A1;",1},
//              {"Temperature","Temp","Temperature value","&#x1F321;",1},
//              {"Humidity","Hum","Humidity value","&#x1F4A7;",1},
//              {"Input","Inp","Input pin value","&#x21A3;",1},
//              {"Toggle","Toggl","Channel for toggling a value/relay","&#x1F504;",0},
//              {"CO2","CO2","CO2 value","&#37;CO<sub>2</sub>",0},
//              {"TVOC","TVOC","TVOC value","TVOC"},
//              {"addFunctionhere 1","Func1","Room for additional functions","F1",0},
//              {"addFunctionhere 2","Func2","Room for additional functions","F2",0}
//      };
//
// 	would generate
//
//              typedef enum {
//                      CHAN_Empty,             // 0 = no channel description
//                      CHAN_Con,               // 1 = Connector (LED, button, relay ...)
//                      CHAN_Temp,              // 2 = Temperature value
//                      CHAN_Hum,               // 3 = Humidity value
//                      CHAN_Inp,               // 4 = Input pin value
//                      CHAN_Toggl,             // 5 = Channel for toggle a relay
//                      CHAN_CO2,               // 6 = CO2 value
//                      CHAN_TVOC,              // 7 = TVOC value
//                      CHAN_Func1,             // 8 = Room for additional functions
//                      CHAN_Func2,             // 9 = Room for additional functions
//              } chanval_t ;
//
//              #define INFO2CHANVAL(r, nofc, c1, c2)  ((c2 * 1024) + (c1 * 16) + nofc)
//
//              short chanvals[] = {
//                      INFO2CHANVAL(IOR_None, 0, CHAN_Empty, CHAN_Empty),
//                      INFO2CHANVAL(IOR_Relay, 1, CHAN_Con, CHAN_Empty),
//              ...
//                      INFO2CHANVAL(IOR_DigitalInput, 1, CHAN_Inp, CHAN_Empty),
//                      INFO2CHANVAL(IOR_DigitalInput_n, 1, CHAN_Inp, CHAN_Empty),
//              ...
//                      INFO2CHANVAL(IOR_Button_ScriptOnly_n, 0, CHAN_Empty, CHAN_Empty),
//                      INFO2CHANVAL(IOR_DHT11, 2, CHAN_Temp, CHAN_Hum),
//              ..
//                      INFO2CHANVAL(IOR_SGP_CLK, 0, CHAN_Empty, CHAN_Empty),
//                      INFO2CHANVAL(IOR_SGP_DAT, 2, CHAN_CO2, CHAN_TVOC),
//                      INFO2CHANVAL(IOR_ADC_Button, 1, CHAN_Con, CHAN_Empty),
//              ...
//                      INFO2CHANVAL(IOR_Counter_r, 1, CHAN_Inp, CHAN_Empty),
//                      INFO2CHANVAL(IOR_Total_Options, 1, CHAN_Empty, CHAN_Empty),
//              };
//
//	(to calculate "chanvals" - coding number of channels and their usage as given in "//iodetails:" information)
//
//
//	 and
//		#define LEGENDSCRIPT "<script>de=[ '','&#x1F4A1;','&#x1F321;','&#x1F4A7;','&#x21A3;','&#x1F504;','&#37;CO<sub>2</sub>','TVOC','F1','F2' ]; \
//		document.getElementById('legend').innerHTML=\"Functions: \" + de[1] + \": Connector / \" + de[2] + \": Temperature / \" + de[3] + \": Humidity / \" + de[4] + \": Input \"</script>"
//
//	(to define the text / symbols shown for the function of a channel in pincfg page)
//	("linebreak" is just for better readability of the comment here, generated is one line)
//
//

cval_t cvals[] = {
        {"","Empty","no channel description","",0},
        {"Connector","Con","Connector (LED, button, relay ...)","&#x1F4A1;",1},
        {"Temperature","Temp","Temperature value","&#x1F321;",1},
        {"Humidity","Hum","Humidity value","&#x1F4A7;",1},
        {"Input","Inp","Input pin value","&#x21A3;",1},
        {"Output","Out","Output pin value","Out",1},
        {"Toggle","Toggl","Channel for toggling a value/relay","&#x1F504;",0},
        {"CO2","CO2","CO2 value","&#37;CO<sub>2</sub>",0},
        {"TVOC","TVOC","TVOC value","TVOC"},
        {"addFunctionhere 1","Func1","Room for additional functions","F1",0},
        {"addFunctionhere 2","Func2","Room for additional functions","F2",0}
};



#if (INCLUDED_BY_NEW_PINS_H)

typedef enum ioRole_e {
	//iodetail:{"name":"None",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Default pin role; this pin does nothing.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":" ",
	//iodetail:"enum":"IOR_None",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_None,
	//iodetail:{"name":"Relay",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"an active-high relay. This relay is closed when a logical 1 value is on linked channel",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Connector",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Rel",
	//iodetail:"enum":"IOR_Relay",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Relay,
	//iodetail:{"name":"Relay_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"(as Relay but pin logical value is inversed)",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Connector",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Rel_n",
	//iodetail:"enum":"IOR_Relay_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Relay_n,
	//iodetail:{"name":"Button",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"a typical button of Tuya device with active-low state (a button that connects IO pin to ground when pressed and also has a 10k or so pull up resistor)",
	//iodetail:"channels used":"2",
	//iodetail:"channel 1 usage":"Connector",
	//iodetail:"channel 2 usage":"Connector",
	//iodetail:"htmlPinRoleName":"Btn",
	//iodetail:"enum":"IOR_Button",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Button,
	//iodetail:{"name":"Button_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"as Button but pin logical value is inversed",
	//iodetail:"channels used":"2",
	//iodetail:"channel 1 usage":"Connector",
	//iodetail:"channel 2 usage":"Connector",
	//iodetail:"htmlPinRoleName":"Btn_n",
	//iodetail:"enum":"IOR_Button_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Button_n,
	//iodetail:{"name":"LED",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"an active-high LED. The internals of 'LED' are the same as of 'Relay'. Names are just separate to make it easier for users.",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Connector",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"LED",
	//iodetail:"enum":"IOR_LED",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_LED,
	//iodetail:{"name":"LED_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"(as Led but pin logical value is inversed)",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Connector",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"LED_n",
	//iodetail:"enum":"IOR_LED_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_LED_n,
	//iodetail:{"name":"PWM",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Pulse width modulation output for LED dimmers (with MQTT dimming support from Home Assistant). Remember to set related channel to correct color index, in the RGBCW order. For CW only lights, set only CW indices.",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"PWM",
	//iodetail:"enum":"IOR_PWM",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_PWM,
	//iodetail:{"name":"LED_WIFI",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"special LED to indicate WLan connection state. LED states are following: LED on = client mode successfully connected to your Router. Half a second blink - connecting to your router, please wait (or connection problem). Fast blink (200ms) - open access point mode. In safe mode (after failed boots), LED might not work.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"WifiLED",
	//iodetail:"enum":"IOR_LED_WIFI",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_LED_WIFI,
	//iodetail:{"name":"LED_WIFI_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"As LED_WIFI, but with inversed logic.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"WifiLED_n",
	//iodetail:"enum":"IOR_LED_WIFI_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_LED_WIFI_n,
	//iodetail:{"name":"Button_ToggleAll",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"this button toggles all channels at once",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Btn_Tgl_All",
	//iodetail:"enum":"IOR_Button_ToggleAll",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Button_ToggleAll,
	//iodetail:{"name":"Button_ToggleAll_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Button_ToggleAll as, but inversed logic of button",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Btn_Tgl_All_n",
	//iodetail:"enum":"IOR_Button_ToggleAll_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Button_ToggleAll_n,
	//iodetail:{"name":"DigitalInput",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"this is a simple digital input pin, it sets the linked channel to current logical value on it, just like digitalRead( ) from Arduino. This input has a internal pull up resistor.",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Input",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"dInput",
	//iodetail:"enum":"IOR_DigitalInput",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_DigitalInput,
	//iodetail:{"name":"DigitalInput_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"As DigitalInput as above, but inverted",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Input",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"dInput_n",
	//iodetail:"enum":"IOR_DigitalInput_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_DigitalInput_n,
	//iodetail:{"name":"ToggleChannelOnToggle",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"this pin will toggle target channel when a value on this pin changes (with debouncing). you can connect simple two position switch here and swapping the switch will toggle target channel relay on or off",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Toggle",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"TglChanOnTgl",
	//iodetail:"enum":"IOR_ToggleChannelOnToggle",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_ToggleChannelOnToggle,
	//iodetail:{"name":"DigitalInput_NoPup",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"As DigitalInput, but without internal programmable pullup resistor. This is used for, for example, XR809 water sensor and door sensor.",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Input",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"dInput_NoPullUp",
	//iodetail:"enum":"IOR_DigitalInput_NoPup",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_DigitalInput_NoPup,
	//iodetail:{"name":"DigitalInput_NoPup_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"As DigitalInput_n, but without internal programmable pullup resistor",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Input",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"dInput_NoPullUp_n",
	//iodetail:"enum":"IOR_DigitalInput_NoPup_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_DigitalInput_NoPup_n,
	//iodetail:{"name":"BL0937_SEL",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"SEL pin for BL0937 energy measuring devices. Set all BL0937 pins to autostart BL0937 driver. Don't forget to calibrate it later.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BL0937SEL",
	//iodetail:"enum":"IOR_BL0937_SEL",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_BL0937",
	//iodetail:"driver":"src/driver/drv_bl0937.c"}
	IOR_BL0937_SEL,
	//iodetail:{"name":"BL0937_CF",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"CF pin for BL0937 energy measuring devices. Set all BL0937 pins to autostart BL0937 driver. Don't forget to calibrate it later.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BL0937CF",
	//iodetail:"enum":"IOR_BL0937_CF",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_BL0937",
	//iodetail:"driver":"src/driver/drv_bl0937.c"}
	IOR_BL0937_CF,
	//iodetail:{"name":"BL0937_CF1",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"CF1 pin for BL0937 energy measuring devices. Set all BL0937 pins to autostart BL0937 driver. Don't forget to calibrate it later.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BL0937CF1",
	//iodetail:"enum":"IOR_BL0937_CF1",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_BL0937",
	//iodetail:"driver":"src/driver/drv_bl0937.c"}
	IOR_BL0937_CF1,
	//iodetail:{"name":"ADC",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Analog to Digital converter converts voltage to channel value which is later published by MQTT and also can be used to trigger scriptable events",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Input",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"ADC",
	//iodetail:"enum":"IOR_ADC",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_ADC,
	//iodetail:{"name":"SM2135_DAT",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"SM2135 DAT pin for SM2135 modified-I2C twowire LED driver, used in RGBCW lights. Set both required SM2135 pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"SM2135DAT",
	//iodetail:"enum":"IOR_SM2135_DAT",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_LED",
	//iodetail:"driver":"src/driver/drv_sm2135.c"}
	IOR_SM2135_DAT,
	//iodetail:{"name":"SM2135_CLK",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"SM2135 CLK pin for SM2135 modified-I2C twowire LED driver, used in RGBCW lights. Set both required SM2135 pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"SM2135CLK",
	//iodetail:"enum":"IOR_SM2135_CLK",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_LED",
	//iodetail:"driver":"src/driver/drv_sm2135.c"}
	IOR_SM2135_CLK,
	//iodetail:{"name":"BP5758D_DAT",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"BP5758D DAT pin for BP5758D modified-I2C twowire LED driver, used in RGBCW lights. Set both required BP5758D pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BP5758D_DAT",
	//iodetail:"enum":"IOR_BP5758D_DAT",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_LED",
	//iodetail:"driver":"src/driver/drv_bp5758d.c"}
	IOR_BP5758D_DAT,
	//iodetail:{"name":"BP5758D_CLK",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"BP5758D CLK pin for BP5758D modified-I2C twowire LED driver, used in RGBCW lights. Set both required BP5758D pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BP5758D_CLK",
	//iodetail:"enum":"IOR_BP5758D_CLK",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_LED",
	//iodetail:"driver":"src/driver/drv_bp5758d.c"}
	IOR_BP5758D_CLK,
	//iodetail:{"name":"BP1658CJ_DAT",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"BP1658CJ DAT pin for BP5758D modified-I2C twowire LED driver, used in RGBCW lights. Set both required BP1658CJ pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BP1658CJ_DAT",
	//iodetail:"enum":"IOR_BP1658CJ_DAT",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_LED",
	//iodetail:"driver":"src/driver/drv_bp1658cj.c"}
	IOR_BP1658CJ_DAT,
	//iodetail:{"name":"BP1658CJ_CLK",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"BP1658CJ CLK pin for BP5758D modified-I2C twowire LED driver, used in RGBCW lights. Set both required BP1658CJ pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BP1658CJ_CLK",
	//iodetail:"enum":"IOR_BP1658CJ_CLK",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_LED",
	//iodetail:"driver":"src/driver/drv_bp1658cj.c"}
	IOR_BP1658CJ_CLK,
	//iodetail:{"name":"PWM_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"as above, but percentage of duty is inversed. This might be useful for some special LED drivers that are using single PWM to choose between Cool white and Warm white (it also needs setting a special flag in General options)",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"PWM_n",
	//iodetail:"enum":"IOR_PWM_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_PWM_n,
	//iodetail:{"name":"IRRecv",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"IR receiver for our IRLibrary port",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"IRRecv",
	//iodetail:"enum":"IOR_IRRecv",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_IR || ENABLE_DRIVER_IRREMOTEESP",
	//iodetail:"driver":"src/driver/drv_ir_new.cpp + src/driver/drv_ir.cpp"}
	//iodetail:"driver":"IR"}
	IOR_IRRecv,
	//iodetail:{"name":"IRSend",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"IR sender for our IRLibrary port",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"IRSend",
	//iodetail:"enum":"IOR_IRSend",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_IR || ENABLE_DRIVER_IRREMOTEESP",
	//iodetail:"driver":"src/driver/drv_ir_new.cpp + src/driver/drv_ir.cpp"}
	IOR_IRSend,
	//iodetail:{"name":"Button_NextColor",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"for RGB strip with buttons; sets next predefined color. For a LED strip that has separate POWER and COLOR buttons.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Btn_NextColor",
	//iodetail:"enum":"IOR_Button_NextColor",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Button_NextColor,
	//iodetail:{"name":"Button_NextColor_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"As NextColor, but inversed button logic",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Btn_NextColor_n",
	//iodetail:"enum":"IOR_Button_NextColor_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Button_NextColor_n,
	//iodetail:{"name":"Button_NextDimmer",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"for RGB strip with buttons; when hold, adjusts the brightness",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Btn_NextDimmer",
	//iodetail:"enum":"IOR_Button_NextDimmer",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Button_NextDimmer,
	//iodetail:{"name":"Button_NextDimmer_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"As NextDimmer, but inversed button logic",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Btn_NextDimmer_n",
	//iodetail:"enum":"IOR_Button_NextDimmer_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Button_NextDimmer_n,
	//iodetail:{"name":"AlwaysHigh",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"always outputs 1",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"AlwaysHigh",
	//iodetail:"enum":"IOR_AlwaysHigh",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_AlwaysHigh,
	//iodetail:{"name":"AlwaysLow",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"always outputs 0",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"AlwaysLow",
	//iodetail:"enum":"IOR_AlwaysLow",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_AlwaysLow,
	//iodetail:{"name":"UCS1912_DIN",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"WIP driver, write a post on Elektroda if you need it working",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"UCS1912_DIN",
	//iodetail:"enum":"IOR_UCS1912_DIN",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_UCS1912",
	//iodetail:"driver":"src/driver/drv_ucs1912.c"}
	IOR_UCS1912_DIN,
	//iodetail:{"name":"SM16703P_DIN",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"WIP driver, write a post on Elektroda if you need it working",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"SM16703P_DIN",
	//iodetail:"enum":"IOR_SM16703P_DIN",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_SM16703P",
	//iodetail:"driver":"src/driver/drv_sm15155e.c"}
	IOR_SM16703P_DIN,
	//iodetail:{"name":"Button_NextTemperature",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Button that automatically allows you to control temperature of your LED device",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Btn_NextTemperature",
	//iodetail:"enum":"IOR_Button_NextTemperature",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Button_NextTemperature,
	//iodetail:{"name":"Button_NextTemperature_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Like Button_NextTemperature, but inversed button logic",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Btn_NextTemperature_n",
	//iodetail:"enum":"IOR_Button_NextTemperature_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Button_NextTemperature_n,
	//iodetail:{"name":"Button_ScriptOnly",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"This button does nothing automatically, even the linked channel is not changed. Useful for scripts, but you can still also use any buttons for scripting.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Btn_ScriptOnly",
	//iodetail:"enum":"IOR_Button_ScriptOnly",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Button_ScriptOnly,
	//iodetail:{"name":"Button_ScriptOnly_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Like Button_ScriptOnly, but inversed logic",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Btn_ScriptOnly_n",
	//iodetail:"enum":"IOR_Button_ScriptOnly_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Button_ScriptOnly_n,
	//iodetail:{"name":"DHT11",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"DHT11 data line. You can have multiple DHT sensors on your device. Related driver is automatically started. Results are saved in related channels to pin with that role (when editing pins, you get two textboxes to set channel indexes)",
	//iodetail:"channels used":"2",
	//iodetail:"channel 1 usage":"Temperature",
	//iodetail:"channel 2 usage":"Humidity",
	//iodetail:"htmlPinRoleName":"DHT11",
	//iodetail:"enum":"IOR_DHT11",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_DHT",
	//iodetail:"driver":"src/driver/drv_dht.c"}
	IOR_DHT11,
	//iodetail:{"name":"DHT12",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"DHT12 data line. You can have multiple DHT sensors on your device. Related driver is automatically started. Results are saved in related channels to pin with that role (when editing pins, you get two textboxes to set channel indexes)",
	//iodetail:"channels used":"2",
	//iodetail:"channel 1 usage":"Temperature",
	//iodetail:"channel 2 usage":"Humidity",
	//iodetail:"htmlPinRoleName":"DHT12",
	//iodetail:"enum":"IOR_DHT12",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_DHT",
	//iodetail:"driver":"src/driver/drv_dht.c"}
	IOR_DHT12,
	//iodetail:{"name":"DHT21",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"DHT21 data line. You can have multiple DHT sensors on your device. Related driver is automatically started. Results are saved in related channels to pin with that role (when editing pins, you get two textboxes to set channel indexes)",
	//iodetail:"channels used":"2",
	//iodetail:"channel 1 usage":"Temperature",
	//iodetail:"channel 2 usage":"Humidity",
	//iodetail:"htmlPinRoleName":"DHT21",
	//iodetail:"enum":"IOR_DHT21",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_DHT",
	//iodetail:"driver":"src/driver/drv_dht.c"}
	IOR_DHT21,
	//iodetail:{"name":"DHT22",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"DHT22 data line. You can have multiple DHT sensors on your device. Related driver is automatically started. Results are saved in related channels to pin with that role (when editing pins, you get two textboxes to set channel indexes)",
	//iodetail:"channels used":"2",
	//iodetail:"channel 1 usage":"Temperature",
	//iodetail:"channel 2 usage":"Humidity",
	//iodetail:"htmlPinRoleName":"DHT22",
	//iodetail:"enum":"IOR_DHT22",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_DHT",
	//iodetail:"driver":"src/driver/drv_dht.c"}
	IOR_DHT22,
	//iodetail:{"name":"CHT83XX_DAT",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"DAT pin of CHT83XX. Setting this pin role and saving will reveal two fields next to it. Set first field to 1 and second to 2. Those are related channel numbers to store temperature and humidity.",
	//iodetail:"channels used":"2",
	//iodetail:"channel 1 usage":"Temperature",
	//iodetail:"channel 2 usage":"Humidity",
	//iodetail:"htmlPinRoleName":"CHT83XX_SDA",
	//iodetail:"enum":"IOR_CHT83XX_DAT",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_CHT83XX",
	//iodetail:"driver":"src/driver/drv_cht8305.c"}
	IOR_CHT83XX_DAT,
	//iodetail:{"name":"CHT83XX_CLK",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"CLK pin of CHT83XX sensor",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"CHT83XX_SCK",
	//iodetail:"enum":"IOR_CHT83XX_CLK",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_CHT83XX",
	//iodetail:"driver":"src/driver/drv_cht8305.c"}
	IOR_CHT83XX_CLK,
	//iodetail:{"name":"SHT3X_DAT",
	//iodetail:"title":"TODO",	
	//iodetail:"descr":"Humidity/temperature sensor DATA pin. Driver will autostart if both required pins are set. See [SHT Sensor tutorial topic here](https://www.elektroda.com/rtvforum/topic3958369.html), also see [this sensor teardown](https://www.elektroda.com/rtvforum/topic3945688.html)",
	//iodetail:"channels used":"2",
	//iodetail:"channel 1 usage":"Temperature",
	//iodetail:"channel 2 usage":"Humidity",
	//iodetail:"htmlPinRoleName":"SHT3X_SDA",
	//iodetail:"enum":"IOR_SHT3X_DAT",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_SHT3X",
	//iodetail:"driver":"src/driver/drv_sht3x.c"}
	IOR_SHT3X_DAT,
	//iodetail:{"name":"SHT3X_CLK",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Humidity/temperature sensor CLOCK pin. Driver will autostart if both required pins are set. See [SHT Sensor tutorial topic here](https://www.elektroda.com/rtvforum/topic3958369.html), also see [this sensor teardown](https://www.elektroda.com/rtvforum/topic3945688.html)",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"SHT3X_SCK",
	//iodetail:"enum":"IOR_SHT3X_CLK",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_SHT3X",
	//iodetail:"driver":"src/driver/drv_sht3x.c"}
	IOR_SHT3X_CLK,
	//iodetail:{"name":"SOFT_SDA",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Generic software SDA pin for our more advanced, scriptable I2C driver. This allows you to even connect a I2C display to OBK.",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"SoftSDA",
	//iodetail:"enum":"IOR_SOFT_SDA",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_I2C",
	//iodetail:"driver":"src/driver/drv_txw81x_camera.c"}
	IOR_SOFT_SDA,
	//iodetail:{"name":"SOFT_SCL",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Generic software SCL pin for our more advanced, scriptable I2C driver.",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"SoftSCL",
	//iodetail:"enum":"IOR_SOFT_SCL",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_I2C",
	//iodetail:"driver":"src/driver/drv_txw81x_camera.c"}
	IOR_SOFT_SCL,
	//iodetail:{"name":"SM2235_DAT",
	//iodetail:"title":"TODO",	
	//iodetail:"descr":"It works for both SM2235 and SM2335. SM2235 DAT pin for SM2235 modified-I2C twowire LED driver, used in RGBCW lights. Set both required SM2235 pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"SM2235DAT",
	//iodetail:"enum":"IOR_SM2235_DAT",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_LED",
	//iodetail:"driver":"src/driver/drv_sm2235.c"}
	IOR_SM2235_DAT,
	//iodetail:{"name":"SM2235_CLK",
	//iodetail:"title":"TODO",	
	//iodetail:"descr":"It works for both SM2235 and SM2335. SM2235 CLK pin for SM2235 modified-I2C twowire LED driver, used in RGBCW lights. Set both required SM2235 pins to autostart the related driver. Don't forget to Map the colors order later, so colors are not mixed.",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"SM2235CLK",
	//iodetail:"enum":"IOR_SM2235_CLK",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_LED",
	//iodetail:"driver":"src/driver/drv_sm2235.c"}
	IOR_SM2235_CLK,
	//iodetail:{"name":"BridgeForward",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Motor/Relay bridge driver control signal. FORWARD direction.",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BridgeFWD",
	//iodetail:"enum":"IOR_BridgeForward",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_BridgeForward,
	//iodetail:{"name":"BridgeReverse",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Motor/Relay bridge driver control signal. REVERSE direction.",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BridgeREV",
	//iodetail:"enum":"IOR_BridgeReverse",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_BridgeReverse,
	//iodetail:{"name":"SmartButtonForLEDs",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"A single button that does all control for LED. Click it toggle power, hold to adjust brightness, double click for next color, triple click for next temperature",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Toggle",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Btn_SmartLED",
	//iodetail:"enum":"IOR_SmartButtonForLEDs",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_SmartButtonForLEDs,
	//iodetail:{"name":"SmartButtonForLEDs_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"As SmartButtonForLEDs, but inverted",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Temperature",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Btn_SmartLED_n",
	//iodetail:"enum":"IOR_SmartButtonForLEDs_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_SmartButtonForLEDs_n,
	//iodetail:{"name":"DoorSensorWithDeepSleep",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Setting this role will make DoorSensor driver autostart. DoorSensor will work like digital input, sending only its value on change. When there are no changes for some times, device will go into deep sleep to save battery. When a change occurs, device will wake up and report change. See [a door sensor example here](https://www.elektroda.com/rtvforum/topic3960149.html)",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Input",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"DoorSnsrWSleep",
	//iodetail:"enum":"IOR_DoorSensorWithDeepSleep",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_DoorSensorWithDeepSleep,
	//iodetail:{"name":"DoorSensorWithDeepSleep_NoPup",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"As DoorSensorWithDeepSleep, but no pullup resistor",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Input",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"DoorSnsrWSleep_nPup",
	//iodetail:"enum":"IOR_DoorSensorWithDeepSleep_NoPup",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_DoorSensorWithDeepSleep_NoPup,
	//iodetail:{"name":"BAT_ADC",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Like ADC, but for a Battery driver that does Battery measurement. See [battery driver topic here](https://www.elektroda.com/rtvforum/topic3959103.html)",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BAT_ADC",
	//iodetail:"enum":"IOR_BAT_ADC",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_BAT_ADC,
	//iodetail:{"name":"BAT_Relay",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Like Relay, but for a Battery driver that does Battery measurement. See [battery driver topic here](https://www.elektroda.com/rtvforum/topic3959103.html)",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Connector",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BAT_Relay",
	//iodetail:"enum":"IOR_BAT_Relay",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_BAT_Relay,
	//iodetail:{"name":"TM1637_DIO",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"TM1637 LED display driver DIO pin. Setting all required TM1637 pins will autostart related driver",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"TM1637_DIO",
	//iodetail:"enum":"IOR_TM1637_DIO",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_TMGN",
	//iodetail:"driver":"src/driver/drv_tm_gn_display_shared.c"}
	IOR_TM1637_DIO,
	//iodetail:{"name":"TM1637_CLK",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"TM1637 LED display driver CLK pin. Setting all required TM1637 pins will autostart related driver",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"TM1637_CLK",
	//iodetail:"enum":"IOR_TM1637_CLK",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_TMGN",
	//iodetail:"driver":"src/driver/drv_tm_gn_display_shared.c"}
	IOR_TM1637_CLK,
	//iodetail:{"name":"BL0937_SEL_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Inverted SEL alternative for BL0937. Choose only one, either SEL or SEL_n. SEL_n may be needed in rare cases.",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BL0937SEL_n",
	//iodetail:"enum":"IOR_BL0937_SEL_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_BL0937",
	//iodetail:"driver":"BL0937"}
	IOR_BL0937_SEL_n,
	//iodetail:{"name":"DoorSensorWithDeepSleep_pd",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"As DoorSensorWithDeepSleep, but with pulldown resistor",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"DoorSnsrWSleep_pd",
	//iodetail:"enum":"IOR_DoorSensorWithDeepSleep_pd",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_DoorSensorWithDeepSleep_pd,
	//iodetail:{"name":"SGP_CLK",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"SGP Quality Sensor Clock line. will autostart related driver",
	//iodetail:"channels used":"0",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"SGP_CLK",
	//iodetail:"enum":"IOR_SGP_CLK",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_SGP_CLK,
	//iodetail:{"name":"SGP_DAT",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"SGP Quality Sensor Data line. will autostart related driver",
	//iodetail:"channels used":"2",
	//iodetail:"channel 1 usage":"CO2",
	//iodetail:"channel 2 usage":"TVOC",
	//iodetail:"htmlPinRoleName":"SGP_DAT",
	//iodetail:"enum":"IOR_SGP_DAT",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_SGP",
	//iodetail:"driver":"SGP"}
	IOR_SGP_DAT,
	//iodetail:{"name":"ADC_Button",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Single ADC with multiple buttons connected.d",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Connector",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"ADC_Button",
	//iodetail:"enum":"IOR_ADC_Button",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_ADC_Button,
	//iodetail:{"name":"GN6932_CLK",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"GN6932 LED Display Driver - Clock pin",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"GN6932_CLK",
	//iodetail:"enum":"IOR_GN6932_CLK",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_TMGN",
	//iodetail:"driver":"src/driver/drv_tm_gn_display_shared.c"}
	IOR_GN6932_CLK,
	//iodetail:{"name":"GN6932_DAT",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"GN6932 LED Display Driver - Data pin",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"GN6932_DAT",
	//iodetail:"enum":"IOR_GN6932_DAT",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_TMGN",
	//iodetail:"driver":"src/driver/drv_tm_gn_display_shared.c"}
	IOR_GN6932_DAT,
	//iodetail:{"name":"GN6932_STB",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"GN6932 LED Display Driver - STB pin (Latch Enable)",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"GN6932_STB",
	//iodetail:"enum":"IOR_GN6932_STB",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_TMGN",
	//iodetail:"driver":"src/driver/drv_tm_gn_display_shared.c"}
	IOR_GN6932_STB,
	//iodetail:{"name":"TM1638_CLK",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"TM1638 8x7 Segment Display - Clock pin",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"TM1638_CLK",
	//iodetail:"enum":"IOR_TM1638_CLK",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_TMGN",
	//iodetail:"driver":"src/driver/drv_tm_gn_display_shared.c"}
	IOR_TM1638_CLK,
	//iodetail:{"name":"TM1638_DAT",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"TM1638 8x7 Segment Display - data pin",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"TM1638_DAT",
	//iodetail:"enum":"IOR_TM1638_DAT",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_TMGN",
	//iodetail:"driver":"src/driver/drv_tm_gn_display_shared.c"}
	IOR_TM1638_DAT,
	//iodetail:{"name":"TM1638_STB",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"TM1638 8x7 Segment Display - STB pin",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"TM1638_STB",
	//iodetail:"enum":"IOR_TM1638_STB",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_TMGN",
	//iodetail:"driver":"src/driver/drv_tm_gn_display_shared.c"}
	IOR_TM1638_STB,
	//iodetail:{"name":"BAT_Relay_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Like BAT_Relay, but inversed. See [battery driver topic here](https://www.elektroda.com/rtvforum/topic3959103.html)",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"BAT_Relay_n",
	//iodetail:"enum":"IOR_BAT_Relay_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_BAT_Relay_n,
	//iodetail:{"name":"KP18058_CLK",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"KP18058 LED linear constant current dimming chip with I2C interface - CLK pin",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"KP18058_CLK",
	//iodetail:"enum":"IOR_KP18058_CLK",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_KP18058",
	//iodetail:"driver":"src/driver/drv_kp18058.c"}
	IOR_KP18058_CLK,
	//iodetail:{"name":"KP18058_DAT",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"KP18058 LED linear constant current dimming chip with I2C interface - DAT pin",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"KP18058_DAT",
	//iodetail:"enum":"IOR_KP18058_DAT",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_KP18058",
	//iodetail:"driver":"src/driver/drv_kp18058.c"}
	IOR_KP18058_DAT,
	//iodetail:{"name":"DS1820",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"vers simple OneWire Temp sensor DS1820",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Temperature",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"DS1820_IO",
	//iodetail:"enum":"IOR_DS1820_IO",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_DS1820 || ENABLE_DRIVER_DS1820_FULL",
	//iodetail:"driver":"src/driver/drv_ds1820_simple.c + src/driver/drv_ds1820_full.c"}
	IOR_DS1820_IO,
	//iodetail:{"name":"PWM_ScriptOnly",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"PWM_ScriptOnly",
	//iodetail:"enum":"PWM_ScriptOnly",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_PWM_ScriptOnly,
	//iodetail:{"name":"PWM_ScriptOnly_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"PWM_ScriptOnly_n",
	//iodetail:"enum":"IOR_PWM_ScriptOnly_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_PWM_ScriptOnly_n,
	//iodetail:{"name":"IOR_Counter_f",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Input",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Counter_f",
	//iodetail:"enum":"IOR_Counter_f",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Counter_f,
	//iodetail:{"name":"IOR_Counter_r",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Input",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"Counter_r",
	//iodetail:"enum":"IOR_Counter_r",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Counter_r,
	//iodetail:{"name":"IRRecv_nPup",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"IRRecv without pull-up",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Input",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"IRRecv_nPup",
	//iodetail:"enum":"IOR_IRRecv_nPup",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_IRREMOTEESP",
	//iodetail:"driver":"src/driver/drv_ir_new.cpp"}
	IOR_IRRecv_nPup,
	//iodetail:{"name":"StripState",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"This is an output pin which has current led_enableAll value",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Output",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"StripState",
	//iodetail:"enum":"IOR_StripState",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_StripState,
	//iodetail:{"name":"StripState_n",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"This is an output pin which has negation of current led_enableAll value",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Output",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"StripState_n",
	//iodetail:"enum":"IOR_StripState_n",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_StripState_n,
	//iodetail:{"name":"HLW8112_SCSN",
	//iodetail:"title":"HLW8112 SCSN Pin",
	//iodetail:"descr":"SCSN pin for HLW8112 SPI energy measuring devices.",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"Input",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"HLW8112_SCSN",
	//iodetail:"enum":"IOR_HLW8112_SCSN",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"ENABLE_DRIVER_HLW8112SPI",
	//iodetail:"driver":"src/driver/drv_hlw8112.c"}
	IOR_HLW8112_SCSN,
	//iodetail:{"name":"Total_Options",
	//iodetail:"title":"TODO",
	//iodetail:"descr":"Current total number of available IOR roles",
	//iodetail:"channels used":"1",
	//iodetail:"channel 1 usage":"",
	//iodetail:"channel 2 usage":"",
	//iodetail:"htmlPinRoleName":"error",
	//iodetail:"enum":"IOR_Total_Options",
	//iodetail:"file":"pins_and_roles.h",
	//iodetail:"define":"",
	//iodetail:"driver":""}
	IOR_Total_Options
} ioRole_t;

typedef enum {
	CHAN_Empty,		// 0 = no channel description
	CHAN_Con,		// 1 = Connector (LED, button, relay ...)
	CHAN_Temp,		// 2 = Temperature value
	CHAN_Hum,		// 3 = Humidity value
	CHAN_Inp,		// 4 = Input pin value
	CHAN_Out,		// 5 = Output pin value
	CHAN_Toggl,		// 6 = Channel for toggling a value/relay
	CHAN_CO2,		// 7 = CO2 value
	CHAN_TVOC,		// 8 = TVOC value
	CHAN_Func1,		// 9 = Room for additional functions
	CHAN_Func2,		// 10 = Room for additional functions
} chanval_t ;


#define INFO2CHANVAL(r, nofc, c1, c2)  ((c2 * 1024) + (c1 * 16) + nofc) 

short chanvals[] = {
	INFO2CHANVAL(IOR_None, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_Relay, 1, CHAN_Con, CHAN_Empty),
	INFO2CHANVAL(IOR_Relay_n, 1, CHAN_Con, CHAN_Empty),
	INFO2CHANVAL(IOR_Button, 2, CHAN_Con, CHAN_Con),
	INFO2CHANVAL(IOR_Button_n, 2, CHAN_Con, CHAN_Con),
	INFO2CHANVAL(IOR_LED, 1, CHAN_Con, CHAN_Empty),
	INFO2CHANVAL(IOR_LED_n, 1, CHAN_Con, CHAN_Empty),
	INFO2CHANVAL(IOR_PWM, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_LED_WIFI, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_LED_WIFI_n, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_Button_ToggleAll, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_Button_ToggleAll_n, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_DigitalInput, 1, CHAN_Inp, CHAN_Empty),
	INFO2CHANVAL(IOR_DigitalInput_n, 1, CHAN_Inp, CHAN_Empty),
	INFO2CHANVAL(IOR_ToggleChannelOnToggle, 1, CHAN_Toggl, CHAN_Empty),
	INFO2CHANVAL(IOR_DigitalInput_NoPup, 1, CHAN_Inp, CHAN_Empty),
	INFO2CHANVAL(IOR_DigitalInput_NoPup_n, 1, CHAN_Inp, CHAN_Empty),
	INFO2CHANVAL(IOR_BL0937_SEL, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_BL0937_CF, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_BL0937_CF1, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_ADC, 1, CHAN_Inp, CHAN_Empty),
	INFO2CHANVAL(IOR_SM2135_DAT, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_SM2135_CLK, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_BP5758D_DAT, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_BP5758D_CLK, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_BP1658CJ_DAT, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_BP1658CJ_CLK, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_PWM_n, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_IRRecv, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_IRSend, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_Button_NextColor, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_Button_NextColor_n, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_Button_NextDimmer, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_Button_NextDimmer_n, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_AlwaysHigh, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_AlwaysLow, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_UCS1912_DIN, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_SM16703P_DIN, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_Button_NextTemperature, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_Button_NextTemperature_n, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_Button_ScriptOnly, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_Button_ScriptOnly_n, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_DHT11, 2, CHAN_Temp, CHAN_Hum),
	INFO2CHANVAL(IOR_DHT12, 2, CHAN_Temp, CHAN_Hum),
	INFO2CHANVAL(IOR_DHT21, 2, CHAN_Temp, CHAN_Hum),
	INFO2CHANVAL(IOR_DHT22, 2, CHAN_Temp, CHAN_Hum),
	INFO2CHANVAL(IOR_CHT83XX_DAT, 2, CHAN_Temp, CHAN_Hum),
	INFO2CHANVAL(IOR_CHT83XX_CLK, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_SHT3X_DAT, 2, CHAN_Temp, CHAN_Hum),
	INFO2CHANVAL(IOR_SHT3X_CLK, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_SOFT_SDA, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_SOFT_SCL, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_SM2235_DAT, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_SM2235_CLK, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_BridgeForward, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_BridgeReverse, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_SmartButtonForLEDs, 1, CHAN_Toggl, CHAN_Empty),
	INFO2CHANVAL(IOR_SmartButtonForLEDs_n, 1, CHAN_Temp, CHAN_Empty),
	INFO2CHANVAL(IOR_DoorSensorWithDeepSleep, 1, CHAN_Inp, CHAN_Empty),
	INFO2CHANVAL(IOR_DoorSensorWithDeepSleep_NoPup, 1, CHAN_Inp, CHAN_Empty),
	INFO2CHANVAL(IOR_BAT_ADC, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_BAT_Relay, 1, CHAN_Con, CHAN_Empty),
	INFO2CHANVAL(IOR_TM1637_DIO, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_TM1637_CLK, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_BL0937_SEL_n, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_DoorSensorWithDeepSleep_pd, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_SGP_CLK, 0, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_SGP_DAT, 2, CHAN_CO2, CHAN_TVOC),
	INFO2CHANVAL(IOR_ADC_Button, 1, CHAN_Con, CHAN_Empty),
	INFO2CHANVAL(IOR_GN6932_CLK, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_GN6932_DAT, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_GN6932_STB, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_TM1638_CLK, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_TM1638_DAT, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_TM1638_STB, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_BAT_Relay_n, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_KP18058_CLK, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_KP18058_DAT, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_DS1820_IO, 1, CHAN_Temp, CHAN_Empty),
	INFO2CHANVAL(IOR_PWM_ScriptOnly, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_PWM_ScriptOnly_n, 1, CHAN_Empty, CHAN_Empty),
	INFO2CHANVAL(IOR_Counter_f, 1, CHAN_Inp, CHAN_Empty),
	INFO2CHANVAL(IOR_Counter_r, 1, CHAN_Inp, CHAN_Empty),
	INFO2CHANVAL(IOR_IRRecv_nPup, 1, CHAN_Inp, CHAN_Empty),
	INFO2CHANVAL(IOR_StripState, 1, CHAN_Out, CHAN_Empty),
	INFO2CHANVAL(IOR_StripState_n, 1, CHAN_Out, CHAN_Empty),
	INFO2CHANVAL(IOR_HLW8112_SCSN, 1, CHAN_Inp, CHAN_Empty),
	INFO2CHANVAL(IOR_Total_Options, 1, CHAN_Empty, CHAN_Empty),
};

#endif // (INCLUDED_BY_NEW_PINS_H)

#if (INCLUDED_BY_NEW_HTTP_C)

const char* htmlPinRoleNames[] = {
	" " ,
	"Rel" ,
	"Rel_n" ,
	"Btn" ,
	"Btn_n" ,
	"LED" ,
	"LED_n" ,
	"PWM" ,
	"WifiLED" ,
	"WifiLED_n" ,
	"Btn_Tgl_All" ,
	"Btn_Tgl_All_n" ,
	"dInput" ,
	"dInput_n" ,
	"TglChanOnTgl" ,
	"dInput_NoPullUp" ,
	"dInput_NoPullUp_n" ,
	"BL0937SEL" ,
	"BL0937CF" ,
	"BL0937CF1" ,
	"ADC" ,
	"SM2135DAT" ,
	"SM2135CLK" ,
	"BP5758D_DAT" ,
	"BP5758D_CLK" ,
	"BP1658CJ_DAT" ,
	"BP1658CJ_CLK" ,
	"PWM_n" ,
	"IRRecv" ,
	"IRSend" ,
	"Btn_NextColor" ,
	"Btn_NextColor_n" ,
	"Btn_NextDimmer" ,
	"Btn_NextDimmer_n" ,
	"AlwaysHigh" ,
	"AlwaysLow" ,
	"UCS1912_DIN" ,
	"SM16703P_DIN" ,
	"Btn_NextTemperature" ,
	"Btn_NextTemperature_n" ,
	"Btn_ScriptOnly" ,
	"Btn_ScriptOnly_n" ,
	"DHT11" ,
	"DHT12" ,
	"DHT21" ,
	"DHT22" ,
	"CHT83XX_SDA" ,
	"CHT83XX_SCK" ,
	"SHT3X_SDA" ,
	"SHT3X_SCK" ,
	"SoftSDA" ,
	"SoftSCL" ,
	"SM2235DAT" ,
	"SM2235CLK" ,
	"BridgeFWD" ,
	"BridgeREV" ,
	"Btn_SmartLED" ,
	"Btn_SmartLED_n" ,
	"DoorSnsrWSleep" ,
	"DoorSnsrWSleep_nPup" ,
	"BAT_ADC" ,
	"BAT_Relay" ,
	"TM1637_DIO" ,
	"TM1637_CLK" ,
	"BL0937SEL_n" ,
	"DoorSnsrWSleep_pd" ,
	"SGP_CLK" ,
	"SGP_DAT" ,
	"ADC_Button" ,
	"GN6932_CLK" ,
	"GN6932_DAT" ,
	"GN6932_STB" ,
	"TM1638_CLK" ,
	"TM1638_DAT" ,
	"TM1638_STB" ,
	"BAT_Relay_n" ,
	"KP18058_CLK" ,
	"KP18058_DAT" ,
	"DS1820_IO" ,
	"PWM_ScriptOnly" ,
	"PWM_ScriptOnly_n" ,
	"Counter_f" ,
	"Counter_r" ,
	"IRRecv_nPup" ,
	"StripState" ,
	"StripState_n" ,
	"HLW8112_SCSN" ,
	"error" ,
	"error" 
};

#endif // (INCLUDED_BY_NEW_HTTP_C)

#if (INCLUDED_BY_NEW_PINS_C)


int PIN_IOR_NofChan(int test){
	return chanvals[test]>=0? chanvals[test]%16 : -1;
}
#endif // (INCLUDED_BY_NEW_PINS_C)

#if (INCLUDED_BY_HTTP_FNS_C)


#define LEGENDSCRIPT "<script>de=[ '','&#x1F4A1;','&#x1F321;','&#x1F4A7;','&#x21A3;','Out','&#x1F504;','&#37;CO<sub>2</sub>','TVOC','F1','F2' ];document.getElementById('legend').innerHTML=\"Functions: \" + de[1] + \": Connector / \" + de[2] + \": Temperature / \" + de[3] + \": Humidity / \" + de[4] + \": Input / \" + de[5] + \": Output \"</script>"

#endif // (INCLUDED_BY_HTTP_FNS_C)


#endif // (INCLUDED_BY_NEW_PINS_H) || (INCLUDED_BY_NEW_PINS_C) || (INCLUDED_BY_NEW_HTTP_C) || (INCLUDED_BY_HTTP_FNS_C)



